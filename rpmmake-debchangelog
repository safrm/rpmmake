#!/bin/sh
#rpmmake-changelog - generates deb changelog from git log - https://github.com/safrm/rpmmake
VERSION=NA                                                                   
VERSION_DATE=NA

usage() {
    echo "usage: `basename $0` [-b <basename>] [-t <no_last_tags] [-a <my-message>]" 
    echo "fast script to create deb changelog from git log - https://github.com/safrm/rpmmake"
    echo ""
    echo "args:"
    echo "  -b | --basename                   project name is taken from argument <my-project> instead of directory name"
    echo "  -t | --tags                       amount of last tags to generate changelog from"
    echo "  -a | --append-line <my-message>   appended last line (more info on http..)"
    echo "  -h | --help                       prints this help"
    echo ""
    echo "rpmmake: ${VERSION} ${VERSION_DATE}"
}
                                                                  
TAGS_COUNT=6 #default to limit size
APPEND_LINE=""
while [ $# -gt 0 ]; do
  case "$1" in
    -b|--basename) shift
               CUSTOM_BASENAME=$1    #clone directory has different name than project
               ;;
    -t|--tags) shift
               TAGS_COUNT=$1   
               ;;
    -a | --append-line) shift
	                APPEND_LINE=$1
                        ;;
    --version)    echo "`basename $0` $VERSION"
                  exit 0
                  ;;  
	* )       PWD_DIR=$PWD; cd $1   #from different directory
		  ;; 
  esac
  shift
done

#basename from 
BASENAME=`basename "$PWD"`
[ "x$CUSTOM_BASENAME" != "x" ] && BASENAME=$CUSTOM_BASENAME
CHANGES_FILE=debian/changelog

#generate empty file
rm -f $CHANGES_FILE

#+1 number correction because we need previous tag info
TAGS_COUNT=$(($TAGS_COUNT+1))
TAGS=`git tag | tail -$TAGS_COUNT | sort -u -r`
if [ "x$TAGS" = "x" ]; then
   echo "You need at least one tag. Exiting.."
   exit 1
fi

#tags & commits
FIRST_TAG=
#previous is in this case newer
HIGHER_TAG=
HIGHER_TAG_HASH=
for TAG in $TAGS
do
  #not tagged changes
  TAG_HASH=`git rev-list $TAG | head -n 1` 
  if [ "x$FIRST_TAG" = "x" ]; then
        FIRST_TAG=$TAG
	echo "first tag: $FIRST_TAG - $TAG_HASH" 
        HEAD_VERSION_COMMITS=`git log $TAG_HASH..HEAD --pretty=format:'- %s' 2> /dev/null`
	#this we need in 1.0.1-2 format
        HEAD_VERSION_TAG=`git describe --tags  2> /dev/null | sed 's/-[^-]\+$//'` 
        LAST_COMMIT_DATE=`git log -1 --pretty=format:'%ad' --date=rfc`
        LAST_COMMIT_AUTHOR=`git log -1 --pretty=format:'%an <%ae>'`
	if [ "x$HEAD_VERSION_COMMITS" != "x" ]; then
		echo "$BASENAME ($HEAD_VERSION_TAG) unstable; urgency=low"  >> $CHANGES_FILE
                git log $TAG_HASH..HEAD --pretty=format:'  * %s' 2> /dev/null >> $CHANGES_FILE
		echo "\n -- $LAST_COMMIT_AUTHOR  $LAST_COMMIT_DATE\n"  >> $CHANGES_FILE
        fi
  fi
  if [ "x$HIGHER_TAG_HASH" != "x" ]; then
	#tag changes for each tag
	TAG_COMMIT_DATE=`git log $HIGHER_TAG_HASH -1 --pretty=format:'%ad' --date=rfc` 
	TAG_COMMIT_AUTHOR=`git log $HIGHER_TAG_HASH -1 --pretty=format:'%an <%ae>'`
	echo "$BASENAME ($HIGHER_TAG) unstable; urgency=low"  >> $CHANGES_FILE 
	git log $TAG_HASH..$HIGHER_TAG_HASH --pretty=format:'  * %s'  >> $CHANGES_FILE 
	echo "\n -- $TAG_COMMIT_AUTHOR  $TAG_COMMIT_DATE\n"  >> $CHANGES_FILE 
  fi
  HIGHER_TAG=$TAG
  HIGHER_TAG_HASH=$TAG_HASH
done

#before first tag
BEFORE_FIRST_TAG_COMMITS=`git log $TAG_HASH --pretty=format:'- %s' 2> /dev/null`
if [ "x$BEFORE_FIRST_TAG_COMMITS" != "x" ]; then
	TAG_COMMIT_DATE=`git log $TAG_HASH -1 --pretty=format:'%ad' --date=rfc` 
	TAG_COMMIT_AUTHOR=`git log $TAG_HASH -1 --pretty=format:'%an <%ae>'`
	echo "$BASENAME ($TAG) unstable; urgency=low"  >> $CHANGES_FILE 
	git log $TAG_HASH --pretty=format:'  * %s'  >> $CHANGES_FILE 
	echo "\n -- $TAG_COMMIT_AUTHOR  $TAG_COMMIT_DATE\n"  >> $CHANGES_FILE 
fi

#extra line
if [ "x$APPEND_LINE" != "x" ]; then
   echo $APPEND_LINE  >> $CHANGES_FILE
fi
echo "debian changelog for $TAGS_COUNT tags updated in ./$CHANGES_FILE"


