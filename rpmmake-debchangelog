#!/bin/sh
#rpmmake-changelog - generates deb changelog from git log - http://safrm.net/projects/rpmmake
#author: Miroslav Safr <miroslav.safr@gmail.com>
VERSION=NA
VERSION_DATE=NA

#support color escape characters on different terminals
alias echo="/bin/echo -e"
RPMMAKE_DCHL=`basename $0`

usage() {
    echo "$RPMMAKE_DCHL ${VERSION} - fast script to create debian changelog from git log"
    echo " http://safrm.net/projects/rpmmake/"
    echo "Usage:$RPMMAKE_DCHL [OPTIONS] ... [PROJECT_DIR]"
    echo "OPTIONS:"
    echo "  -b,   --basename <my-project> .... project name is taken from argument <my-project> instead of directory name"
    echo "  -t,   --tags <N> ................. amount of last tags to generate changelog from (default 6)"
    echo "  -d,   --distro <distro-name> ..... use specific distro name (default is unstable)"
    echo "  -sv,  --set-version <version> .... sets latest changelog version"
    echo "  -id,  --include-dir <dir-name> ... include only changes only from selected directory"
    echo "  -a,   --append-line <my-message> . appended last line (more info on http..)"
    echo "  -V,   --version .................. prints version of scripts"
    echo "  -h,   --help ..................... prints this help"
    echo ""
}

TAGS_COUNT=6 #default to limit size
APPEND_LINE=""
while [ $# -gt 0 ]; do
  case "$1" in
    -b|--basename) shift
               CUSTOM_BASENAME=$1    #clone directory has different name than project
               ;;
    -t|--tags) shift
               TAGS_COUNT=$1
               ;;
    -d | --distro) shift
		DISTRO=$1
		;;
    -sv|--set-version) shift
               DEB_VERSION=$1           #custom version
			   ;;
	-id|--include-dir) shift
               INCLUDED_DIRS="$1 $INCLUDED_DIRS"
			   ;;
    -a | --append-line) shift
	                APPEND_LINE=$1
                        ;;
    -V | --version)    echo "$RPMMAKE_DCHL  ${VERSION} ${VERSION_DATE}"
                  exit 0
                  ;;
    -h | --help ) usage
              exit 0
              ;;
	* )       PWD_DIR=$PWD; cd $1   #from different directory
		  ;;
  esac
  shift
done

#basename from arg or directory
[ -z "$BASENAME" ] && BASENAME=`basename "$PWD"`
CHANGES_FILE=debian/changelog

#generate empty file
rm -f $CHANGES_FILE

#+1 number correction because we need previous tag info
TAGS_COUNT=$(($TAGS_COUNT+1))
TAGS=`git tag | sort -V -u -r | head -$TAGS_COUNT`

if [ -z "$DISTRO" ]; then
#	DISTRO=`cat /etc/*-release | grep DISTRIB_CODENAME | awk -F '=' {' print $2'}`
	DISTRO=$( lsb_release -sc )
fi
if [ -z "$DISTRO" ]; then
	echo "distroseries not detected using unstable"
	DISTRO=unstable
fi

#tags & commits
FIRST_TAG=
#previous is in this case newer
HIGHER_TAG=
HIGHER_TAG_HASH=
for TAG in $TAGS
do
  #not tagged changes
  TAG_HASH=`git rev-list $TAG | head -n 1`
  if [ -z "$FIRST_TAG" ]; then
        FIRST_TAG=$TAG
	    echo "first tag: $FIRST_TAG - $TAG_HASH"
        HEAD_VERSION_COMMITS=`git log $TAG_HASH..HEAD --pretty=format:'- %s' 2> /dev/null`
	    #this we need in 1.0.1-2 format
        HEAD_VERSION_TAG=`git describe --tags  2> /dev/null | sed 's/-[^-]\+$//'`
        LAST_COMMIT_DATE=`git log -1 --pretty=format:'%ad' --date=rfc`
        LAST_COMMIT_AUTHOR=`git log -1 --pretty=format:'%an <%ae>'`
		if [ ! -z "$HEAD_VERSION_COMMITS" ]; then
			if [ -z "$DEB_VERSION" ]; then
				#we use last tag + git hash
				echo "$BASENAME ($HEAD_VERSION_TAG) $DISTRO; urgency=low"  >> $CHANGES_FILE
		        	git log $TAG_HASH..HEAD --pretty=format:'  * %w(72,1,2)%s' $INCLUDED_DIRS 2> /dev/null >> $CHANGES_FILE
				echo "\n -- $LAST_COMMIT_AUTHOR  $LAST_COMMIT_DATE\n"  >> $CHANGES_FILE
			else
				#we use given version
				echo "$BASENAME ($DEB_VERSION) $DISTRO; urgency=low"  >> $CHANGES_FILE
		            git log $TAG_HASH..HEAD --pretty=format:'  * %w(72,1,2)%s' $INCLUDED_DIRS 2> /dev/null >> $CHANGES_FILE
				echo "\n -- $LAST_COMMIT_AUTHOR  $LAST_COMMIT_DATE\n"  >> $CHANGES_FILE
			fi
		fi
  fi
  if [ ! -z "$HIGHER_TAG_HASH" ]; then
	#tag changes for each tag
	TAG_COMMIT_DATE=`git log $HIGHER_TAG_HASH -1 --pretty=format:'%ad' --date=rfc`
	TAG_COMMIT_AUTHOR=`git log $HIGHER_TAG_HASH -1 --pretty=format:'%an <%ae>'`
	if [ ! -z "$HEAD_VERSION_COMMITS" -a "x$HIGHER_TAG" = "x$DEB_VERSION" ]; then
		:
	else
		echo "$BASENAME ($HIGHER_TAG) $DISTRO; urgency=low"  >> $CHANGES_FILE
	fi
	git log $TAG_HASH..$HIGHER_TAG_HASH --pretty=format:'  * %w(72,1,2)%s' $INCLUDED_DIRS >> $CHANGES_FILE
	echo "\n -- $TAG_COMMIT_AUTHOR  $TAG_COMMIT_DATE\n"  >> $CHANGES_FILE
  fi
  HIGHER_TAG=$TAG
  HIGHER_TAG_HASH=$TAG_HASH
done

#before first tag
if [ `echo "$TAGS" | wc -l` -lt $TAGS_COUNT ]; then
	BEFORE_FIRST_TAG_COMMITS=`git log $TAG_HASH --pretty=format:'- %s' $INCLUDED_DIRS 2> /dev/null`
	if [ ! -z "$BEFORE_FIRST_TAG_COMMITS" ]; then
		TAG_COMMIT_DATE=`git log $TAG_HASH -1 --pretty=format:'%ad' --date=rfc`
		TAG_COMMIT_AUTHOR=`git log $TAG_HASH -1 --pretty=format:'%an <%ae>'`
		#when there are no tags
		if [ -z "$TAGS" ]; then
		   	echo "There are no tags."
			if [ -z "$DEB_VERSION" ]; then
				DEB_VERSION=0.0.0
			fi
			echo "$BASENAME ($DEB_VERSION) $DISTRO; urgency=low"  >> $CHANGES_FILE
			#simulate new tag for printout
			TAG_COMMIT_AUTHOR="`git config user.name` <`git config user.email`>"
			TAG_COMMIT_DATE=`date -R`
		else
		    echo "$BASENAME ($TAG) $DISTRO; urgency=low"  >> $CHANGES_FILE
		fi
		git log $TAG_HASH --pretty=format:'  * %w(72,1,2)%s'  >> $CHANGES_FILE
		echo "\n -- $TAG_COMMIT_AUTHOR  $TAG_COMMIT_DATE\n"  >> $CHANGES_FILE
	fi
fi

#extra line
if [ ! -z "$APPEND_LINE" ]; then
   echo $APPEND_LINE  >> $CHANGES_FILE
fi
echo "debian changelog for $TAGS_COUNT tags updated in ./$CHANGES_FILE"


