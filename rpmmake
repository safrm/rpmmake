#!/bin/sh
#rpmmake - fast script to create rpm package inside the git repo without being root - https://github.com/safrm/rpmmake
#author: Miroslav Safr <miroslav.safr@gmail.com>
#
#usage1: <my-project>$ rpmmake  ................... builds rpms from <my-project>/<my-project>.spec in <my-project>/rpm rootdir 
#                                                   requires <my-project>/<my-project>.spec and tags as x.y.z
#usage2: rpmmake  /<my-path>/<my-project> ......... builds rpms from /<my-path>/<my-project>/<my-project>.spec in /<my-path>/<my-project>/rpm rootdir
#usage3: <some-other-name>$ rpmmake -b <my-project> ...... project name is taken from argument <my-project> instead of directory name
VERSION=NA                                                                   
VERSION_DATE=NA

usage() {
    echo "usage: `basename $0` [<path_to_project_git_dir>] [-b <basename>] "
    echo "fast script to create rpm package inside the git repo without being root - https://github.com/safrm/rpmmake"
    echo ""
    echo "<path_to_project_git_dir>  path to git directory (empty uses current directory)"
    echo "args:"
    echo "  -b  | --basename     project name is taken from argument <my-project> instead of directory name"
    echo "  -ns | --nosign      do not sign the package"
    echo "  -ne | --noexpect    do not use expect to enter passphrase"
    echo "  -nv | --noverify    do not run package verification"
    echo "  -h  | --help         prints this help"
    echo ""
    echo "rpmmake: ${VERSION} ${VERSION_DATE}"
}
SIGN_ARG=" --sign"
VERIFY=1
EXPECT=1
while [ $# -gt 0 ]; do
  case "$1" in
    -b|--basename) shift
               CUSTOM_BASENAME=$1    #clone directory has different name than project
               ;;
    -ns|--nosign)
               SIGN_ARG=""
               ;;
    -nv|--noverify)
               VERIFY=0
               ;;
    -ne|--noexpect)
               EXPECT=0
               ;;
    --version)    echo "`basename $0` ${VERSION} ${VERSION_DATE}"
                  exit 0
                  ;;  
    -h | --help ) usage 
		  exit 0
                  ;;
	* )       PWD_DIR=$PWD; cd $1   #from different directory
			   ;; 
  esac
  shift
done

#basename from 
BASENAME=`basename "$PWD"`
[ "x$CUSTOM_BASENAME" != "x" ] && BASENAME=$CUSTOM_BASENAME
if [ ! -f $BASENAME.spec ]
then
    echo "File $PWD/$BASENAME.spec does not exists" 
    exit 1
fi

VERSION=`git describe --abbrev=0 2> /dev/null`
if [ "x$VERSION" = "x" ]
then
    echo "error: version not detected"
    exit 1
fi
echo "preparing $BASENAME-$VERSION"

#cleaning
rm -fr ./rpm
mkdir -p rpm/SOURCES rpm/BUILD rpm/SRPMS rpm/RPMS/i386 

#update version in spec from git tag
#sed -i".bkp" "s/^Version:.*/Version:    ${VERSION}/" ./$BASENAME.spec && rm $BASENAME.spec.bkp
sed  "s/^Version:.*/Version:    ${VERSION}/" ./$BASENAME.spec > rpm/SOURCES/$BASENAME-$VERSION.spec

#use changelog from edited file
if [ ! -e ./$BASENAME.changes ]; then
#or generate changelog automatically 
  rpmmake-changelog -b $BASENAME 
fi
cat ./$BASENAME.changes >> rpm/SOURCES/$BASENAME-$VERSION.spec

#update release no
#NEW_RELEASE=$[`awk '/Release/ {print $2}' $BASENAME.spec`+1]

#qt clear current sources
if ls -U *.pro > /dev/null 2>&1; then
    qmake && make distclean
fi

#add rpm exclude
#for old tar
TAR_MIN_VERSION=`tar --version | head -1 |  awk -F"[ .]" ' { print   $5 }'`
if [ $TAR_MIN_VERSION -lt 21 ]
then
  echo "old tar $TAR_MIN_VERSION "
  tar --exclude=.gitignore --exclude=.git/* --exclude=build/* --exclude=debian/* --exclude=*.tar.bz2 --exclude=rpm/* -cvjf rpm/SOURCES/$BASENAME-$VERSION.tar.bz2  ./
else
  echo "new tar $TAR_MIN_VERSION "
  tar --exclude-vcs --exclude=build/* --exclude=debian/* --exclude=*.tar.bz2 --exclude=rpm/* -cvjf rpm/SOURCES/$BASENAME-$VERSION.tar.bz2  ./
fi
echo "tar ball OK"

#rpmbuild ./<git-name>.spec
#--target i386
#sign from ~/.rpmmacros
#%_signature     gpg
#%_gpg_name      name or key
if [ $EXPECT -eq 1 ]; then
    rpmmake-expect rpmbuild -ba ./rpm/SOURCES/$BASENAME-$VERSION.spec --define="_topdir `pwd`/rpm" --verbose $SIGN_ARG
else
    rpmbuild -ba ./rpm/SOURCES/$BASENAME-$VERSION.spec --define="_topdir `pwd`/rpm" --verbose $SIGN_ARG
fi

#verification
if [ $? = 0 -a $VERIFY = 1 ] 
then
    PACKAGES=`find ./rpm/ -type f -name "*.rpm" -not -name "*.src.rpm"`
    for PACKAGE in $PACKAGES ; do

    rpm -qip $PACKAGE
    if [ $? != 0 ] 
    then
      echo "problem with $PACKAGE exiting...";
      exit 1;
    fi
done
fi
cd $PWD_DIR



